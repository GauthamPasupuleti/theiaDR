#! /bin/bash

display_usage() {
   echo -e "Usage: \n bla bla bla... \n"
}

### Commands ------------------------------

export AVAILABLE_COMMANDS=(start_all start_processes stop_all stop_processes restart_processes resize get exit)

# In order to insert a new command, add it to the previus array
# and create a new function called cmd_NAME

# Controlled exit
cmd_exit(){
   exit 0
}

# create_cluster
cmd_create_cluster(){
    echo "Creating a new cluster"
    gcloud container clusters create cl1 --num-nodes=7
}

# start_processes
cmd_start_processes(){
   echo "Starting kubernetes processes"
   
   cd kubernetes
    
   # mongo, grade and api server
   # sleep are added in order to give time to the db to start
   sleep 2
   kubectl apply -f googlecloud_ssd.yaml
   sleep 10
   kubectl apply -f mongo-statefulset.yaml
   sleep 60
   kubectl apply -f grade.yml
   sleep 10
   kubectl apply -f web.yml

}

# start_all
cmd_start_all(){
   cmd_create_cluster
   cmd_start_processes
}

# stop_processes
cmd_stop_processes(){
   echo "Cleaning kubernetes processes"

   # Clean deploy, svc, rc and pods
   kubectl delete statefulsets --all
   # kubectl delete pvc -l role=mongo
   kubectl delete deploy --all
   kubectl delete svc --all
   kubectl delete rc --all
   kubectl delete po --all
}

# stop_all
cmd_stop_all(){
   echo "Stopping the cluster"
   
   cmd_stop_processes
   sleep 10 
   # Tear down the cluster
   gcloud container clusters delete cl1
   
}

# restart
cmd_restart_processes(){
   echo "Restarting the cluster"
   cmd_stop_processes
   sleep 35
   cmd_start_processes 
}

# resize
cmd_resize(){
   clear

   # DISPLAY DEPLOYMENTS
   # Available deployments are listed in an array in project-config
   while : ;
   do
       echo "Current status:"
       kubectl get deploy

       echo -e "\nResizing deployment of..."
       for ((i=1;i <= ${#DEPLOYMENTS_PROD[@]}; i++));
       do
           echo $i. ${DEPLOYMENTS_PROD[i-1]}
       done
       read choice
       if [[ $choice =~ ^[0-9]+$ && ${choice} -gt 0 && ${choice} -lt ${#DEPLOYMENTS_PROD[@]}+1 ]]
       then
           CHOSEN_DEPLOY=${DEPLOYMENTS_PROD[$choice-1]/.\//}
           break
       else
          clear
          echo -e "Unrecognized command. Type a number among the one shown below.\n"
       fi
   done  
   
   echo "Scaling $CHOSEN_DEPLOY to..."
   read scale_choice
   if [[ $scale_choice =~ ^[0-9]+$ && ${scale_choice} -gt -1 ]]
   then
      kubectl scale deploy $CHOSEN_DEPLOY --replicas=$scale_choice
   else
      echo -e "'${scale_choice}' is not a valid number."
   fi   
}

cmd_external-ip(){
   kubectl get svc | awk -F" " '$3~/^[0-9]/ {print $1,$3}'
}

cmd_cluster-credentials(){
   gcloud container clusters get-credentials cl1
}

# get
cmd_get(){
   GET_OPTIONS_LIST=(external-ip cluster-credentials exit)
   clear
   echo "Available cluster info"
   # if option in GET_OPTIONS_LIST, switch 
   # Display commands and let user choose
   while : ;
   do
       echo "Choose a command using its number:"
       for ((i=1;i <= ${#GET_OPTIONS_LIST[@]}; i++));
       do
           echo $i. ${GET_OPTIONS_LIST[i-1]}
       done
       read choice
       if [[ $choice =~ ^[0-9]+$ && ${choice} -gt 0 && ${choice} -lt ${#GET_OPTIONS_LIST[@]}+1 ]]
       then
           CHOSEN_OPTION=${GET_OPTIONS_LIST[$choice-1]/.\//}
           break
       else
          clear
          echo -e "Unrecognized command. Type a number among the one shown below.\n"
       fi
   done
   
   cmd_$CHOSEN_OPTION
}

# -----------------------------------------
